@top Program {
  --
  (statements)?
}

@precedence {
  spread,

  lonely-type
  prefix
  postfix
  braces

  
  // Mathy stuff
  power @left
  bitshift @left
  times @left
  plus @left
  transpose @left
  range @left
  pipe @left
  pipeback @right
  contains @left
  band @right
  bor @right

  do
  arrow @left
  
  semicolon @left,

  tuple @left,
  comma @left,

  field @left
  
  left @left,
  right @right

  baretuple
  statement
}

Call {
  callable_expression Tuple
  // Do { !do - kw<"do"> - DoArgs { statement }
  //   -- ~op
  //   (Block)?
  //   kw<"end">
  // }?
}

ArrowFunction {
  expression !arrow "->" (expression | Assignment)
}

Field {
  callable_expression !field "." - Identifier
}

Terminator[@name=] { (newline|";") - }
statements {
  // So here is a weird thing:
  // If I just put `statement -` here, it will never go for that when there
  // is a space after a expression, instead opting for Assignment... with errors,
  // even though `statement -` fits perfectly?! But now I put `expression -`
  // here as well, it recognizes that those are similar?
  // Need to make a smaller reproducible thing
  (statement | expression) -
  (
    Terminator+
    (statement | expression) -
  )*
  Terminator*
}
Block {
  statements
}

statement {
  Assignment |
  expression |
  BareTuple
}
expression {
  callable_expression |
  non_callable_expression |
  Binary |
  UnaryExpression
}
non_callable_expression {
  Number |
  If |
  Function |
  EmptyFunction |
  Return |
  Let |
  Local |
  Global |
  Const |
  Quote |
  definitions |
  ArrowFunction
}
callable_expression_without_operators {
  Identifier ~identifier |
  Call ~identifier |
  Field |
  String |
  Symbol |
  Quoted |
  Character |
  Interpolation |
  Interpolation2 |
  Tuple ~identifier |
  Braces |
  LonelyType |
  Typed |
  Index
}
callable_expression {
  callable_expression_without_operators 
  // possible_broadcast<timesOperator>
}
expression_without_operators {
  callable_expression_without_operators |
  non_callable_expression
}

LonelyType {
  "::" !lonely-type expression
}
Typed {
  expression !left "::" expression
}
Index {
  expression !left "[" expression "]"
}
Braces {
  callable_expression
  !braces
  "{" 
  --
  (
    InnerTuple
    ((";" --)+ InnerTuple)*
    (";" --)*
  )?
  "}"
}

definitions {
  Struct
}
Struct {
  (kw<"mutable"> -)? kw<"struct"> - (Number | callable_expression) newline --
  Block
  kw<"end">
}

Symbol { ":" (Identifier | String) }
Quoted { ":(" -- expression -- ")" }

Interpolation { "$" (Identifier | String) }
Interpolation2 { "$(" -- expression -- ")" }

Binary {
  // expression !power - possible_broadcast<powerOperator> !power -- expression |
  expression !times - ~op possible_broadcast<timesOperator> !times -- expression |
  // expression !bitshift - bitshiftOperator !bitshift -- expression |

  // TODO Eventually I need to add "$" back in, but that's gonna be
  // .... a heck of a ride so not today..
  // expression !plus - ("$" | possible_broadcast<plusOperatorExtra | plusminus>) !plus expression
  expression !plus - possible_broadcast<plusOperatorExtra | plusminus> !plus -- expression |

  
  // e !arrow arrowOperator e |
  // e !pipeback "<|" e |
  // e !pipe "|>" e |
  // e !contains (kw<"in"> | kw<"isa"> | comparisonOperator) !contains e |
  expression !bor - "||" -- expression |
  expression !band - "&&" -- expression
}

UnaryExpression {
  (unaryOperatorExtra | plusminus) - !prefix expression |
  expression - !postfix ("'" | ".'")
}


// This Assignment/BareTuple pair does not have
// the BareTuple end in spaces, also just keeping this around..
//
// Assignment {
//   BareTuple
//   -
//   "="
//   --
//   statement
// }
// BareTuple {
//   expression ~expression
//   ("," ~spaces-after-statement -- expression)*
//   (",")?
//   ~spaces-after-statement
// }

Assignment {
  Assignee {
    (expression - | BareTupleAssignment)
  }
  "="
  --
  statement
}
// BareTuple {
//   expression
//   (- !baretuple "," -- expression)*
//   (- ",")? !baretuple
// }
// BareTuple {
//   expression - "," -
//   (
//     - expression
//     (- "," - expression -)*
//     (- ",")?
//   )?
// }
BareTupleAssignment[@name="BareTuple"] {
  expression - "," -
  (
    (newline --)? expression -
    ("," -- expression -)*
    ("," -)?
  )?
}
BareTuple {
  expression ~expression
  (
    // Why do I need this here???
    !baretuple
    - ","
    // I would want to do `--` here,
    // but that won't work, because it doesn't look enough like
    // what BareTuple above has üôÉ
    // Need to figure out where lezer stops with comparing, because this is
    // theoretically the same as `--`, but I guess the different tokens might
    // be part of it?
    - (newline --)?
    (expression)
  )+
}

Local { kw<"local"> - statement }
Global { kw<"global"> - statement }
Const { kw<"const"> - statement }

// This is an assignment but without the possibility
// of having a "BareTuple" (AssignmentLocation) as assignee.
// e.g. in tuple, let blocks
SimpleAssignment[@name="Assignment"] {
  expression - "=" -- expression
}

Let {
  kw<"let">
    -
    LetAssignmentBlock {
      (
        (expression | SimpleAssignment)
        -
        (
          ","
          -
          (expression | SimpleAssignment)
          -
        )*
      )?
    }
    (
      (newline|";")
      --
      (Block)?
    )?
  kw<"end">
}

// Identifier = (expression | SimpleAssignment)

separated_but_can_also_end_with<thing, seperator> {
  thing
  (
    (seperator thing)*
    seperator?
  )?
}

// Important, InnerTuple ends with --,
// couldn't get it to work any other way... (yet)
//    Strike that, found a way, but that leads to more
//    problems, so having it end in -- is fine I guess
InnerTuple {
  (expression | SimpleAssignment)
  --
  (
    ("," -- (expression | SimpleAssignment) --)*
    ("," --)?
  )?
}
// InnerTupleWithoutEndingInSpaces {
//   expression
//   (-- "," -- expression)*
//   (-- ",")?
// }
Tuple {
  !tuple
  "("
  --
  (
    InnerTuple?
    ((";" --)+ InnerTuple)*
    (";" --)*
  )?
  ")"
}

Function {
  kw<"function">
  -
  (Call ~identifier | Tuple ~identifier)
  --
  (Block)?
  kw<"end">
}

EmptyFunction {
  kw<"function">
  -
  Identifier ~identifier
  --
  kw<"end">
}


Quote {
  kw<"quote"> --
  Block
  kw<"end">
}

If {
  IfClause {
    kw<"if">
    -
    expression
    -- ~op
    (Block)?
  }

  ElseifClause {
    kw<"elseif">
    -
    expression
    -- ~op
    (Block)?
  }*

  ElseClause {
    kw<"else">
    --
    (Block)?
  }?

  kw<"end">
}

Return {
  kw<"return"> - expression
}

-[@name=] { spaces? }

// --[@name=] { (spaces|newline)* }
--[@name=] { spaces? (newline spaces?)* }

kw<value> { @specialize[@name={value}]<identifier, value> }

mathop<value> { @specialize[@name={value}]<identifier, value> }

// Was too eager to change the way julia-lezer did it with special `"." "*"`
// token combinations... I see now why that would have been useful...
// (It tries to read every "." as broadcast now, so not FieldExpressions ever)
// possible_broadcast<k> {
//   Broadcast { broadcastOperator k } | k
// }
possible_broadcast<k> { k }

Identifier { identifier }

@skip { Comment }

@tokens {
  // Number { @digit+ }
  identifier { (@asciiLetter|"_")(@asciiLetter|"_"|@digit)* }
  String { '"' (![\\\n"] | "\\" _)* '"' }
  newline { $[\r\n] }
  spaces { (" "|"\t")+ }

  Comment {
    "#" ![\n]*
  }
  Number {
    (
      "0" $[xX] $[0-9a-fA-F] $[0-9a-fA-F_]* |
      $[0-9] $[0-9_]* "."? ($[0-9] $[0-9_]*)? |
      "." $[0-9] $[0-9_]*
    )
    ($[eE] ("-" | "+")? $[0-9]+)?
  }
  powerOperator[@name="PowerOp"] {
    "^" | "‚Üë" | "‚Üì" | "‚áµ" | "‚ü∞" | "‚ü±" | "‚§à" | "‚§â" | "‚§ä" | "‚§ã" | "‚§í" | "‚§ì" | "‚•â" | "‚•å" | "‚•ç" | "‚•è" | "‚•ë" | "‚•î" | "‚•ï" | "‚•ò" | "‚•ô" | "‚•ú" | "‚•ù" | "‚•†" | "‚•°" | "‚•£" | "‚••" | "‚•Æ" | "‚•Ø" | "Ôø™" | "Ôø¨"
  }
  timesOperator {
    "*" | "/" | "√∑" | "%" | "&" | "‚ãÖ" | "‚àò" | "√ó" | "\\" | "‚à©" | "‚àß" | "‚äó" | "‚äò" | "‚äô" | "‚äö" | "‚äõ" | "‚ä†" | "‚ä°" | "‚äì" | "‚àó" | "‚àô" | "‚à§" | "‚Öã" | "‚âÄ" | "‚äº" | "‚ãÑ" | "‚ãÜ" | "‚ãá" | "‚ãâ" | "‚ãä" | "‚ãã" | "‚ãå" | "‚ãè" | "‚ãí" | "‚üë" | "‚¶∏" | "‚¶º" | "‚¶æ" | "‚¶ø" | "‚ß∂" | "‚ß∑" | "‚®á" | "‚®∞" | "‚®±" | "‚®≤" | "‚®≥" | "‚®¥" | "‚®µ" | "‚®∂" | "‚®∑" | "‚®∏" | "‚®ª" | "‚®º" | "‚®Ω" | "‚©Ä" | "‚©É" | "‚©Ñ" | "‚©ã" | "‚©ç" | "‚©é" | "‚©ë" | "‚©ì" | "‚©ï" | "‚©ò" | "‚©ö" | "‚©ú" | "‚©û" | "‚©ü" | "‚©†" | "‚´õ" | "‚äç" | "‚ñ∑" | "‚®ù" | "‚üï" | "‚üñ" | "‚üó"
  }
  plusOperatorExtra {
    "|||" | "‚äï" | "‚äñ" | "‚äû" | "‚äü" | "|++|" | "‚à™" | "‚à®" | "‚äî" | "¬±" | "‚àì" | "‚àî" | "‚à∏" | "‚âÇ" | "‚âè" | "‚äé" | "‚äª" | "‚äΩ" | "‚ãé" | "‚ãì" | "‚ß∫" | "‚ßª" | "‚®à" | "‚®¢" | "‚®£" | "‚®§" | "‚®•" | "‚®¶" | "‚®ß" | "‚®®" | "‚®©" | "‚®™" | "‚®´" | "‚®¨" | "‚®≠" | "‚®Æ" | "‚®π" | "‚®∫" | "‚©Å" | "‚©Ç" | "‚©Ö" | "‚©ä" | "‚©å" | "‚©è" | "‚©ê" | "‚©í" | "‚©î" | "‚©ñ" | "‚©ó" | "‚©õ" | "‚©ù" | "‚©°" | "‚©¢" | "‚©£"
  }
  arrowOperator {
    "--" | "-->" | "."?  ("‚Üê" | "‚Üí" | "‚Üî" | "‚Üö" | "‚Üõ" | "‚Üû" | "‚Ü†" | "‚Ü¢" | "‚Ü£" | "‚Ü¶" | "‚Ü§" | "‚ÜÆ" | "‚áé" | "‚áç" | "‚áè" | "‚áê" | "‚áí" | "‚áî" | "‚á¥" | "‚á∂" | "‚á∑" | "‚á∏" | "‚áπ" | "‚á∫" | "‚áª" | "‚áº" | "‚áΩ" | "‚áæ" | "‚áø" | "‚üµ" | "‚ü∂" | "‚ü∑" | "‚üπ" | "‚ü∫" | "‚üª" | "‚üº" | "‚üΩ" | "‚üæ" | "‚üø" | "‚§Ä" | "‚§Å" | "‚§Ç" | "‚§É" | "‚§Ñ" | "‚§Ö" | "‚§Ü" | "‚§á" | "‚§å" | "‚§ç" | "‚§é" | "‚§è" | "‚§ê" | "‚§ë" | "‚§î" | "‚§ï" | "‚§ñ" | "‚§ó" | "‚§ò" | "‚§ù" | "‚§û" | "‚§ü" | "‚§†" | "‚•Ñ" | "‚•Ö" | "‚•Ü" | "‚•á" | "‚•à" | "‚•ä" | "‚•ã" | "‚•é" | "‚•ê" | "‚•í" | "‚•ì" | "‚•ñ" | "‚•ó" | "‚•ö" | "‚•õ" | "‚•û" | "‚•ü" | "‚•¢" | "‚•§" | "‚•¶" | "‚•ß" | "‚•®" | "‚•©" | "‚•™" | "‚•´" | "‚•¨" | "‚•≠" | "‚•∞" | "‚ß¥" | "‚¨±" | "‚¨∞" | "‚¨≤" | "‚¨≥" | "‚¨¥" | "‚¨µ" | "‚¨∂" | "‚¨∑" | "‚¨∏" | "‚¨π" | "‚¨∫" | "‚¨ª" | "‚¨º" | "‚¨Ω" | "‚¨æ" | "‚¨ø" | "‚≠Ä" | "‚≠Å" | "‚≠Ç" | "‚≠É" | "‚≠Ñ" | "‚≠á" | "‚≠à" | "‚≠â" | "‚≠ä" | "‚≠ã" | "‚≠å" | "Ôø©" | "Ôø´" | "‚áú" | "‚áù" | "‚Üú" | "‚Üù" | "‚Ü©" | "‚Ü™" | "‚Ü´" | "‚Ü¨" | "‚Üº" | "‚ÜΩ" | "‚áÄ" | "‚áÅ" | "‚áÑ" | "‚áÜ" | "‚áá" | "‚áâ" | "‚áã" | "‚áå" | "‚áö" | "‚áõ" | "‚á†" | "‚á¢")
  }
  bitshiftOperator {
    ">>" | "<<" | ">>>"
  }
  comparisonOperator {
    "|<:|" | "|>:|" | "."?  (">" | "<" | ">=" | "‚â•" | "<=" | "‚â§" | "==" | "===" | "‚â°" | "!=" | "‚â†" | "!==" | "‚â¢" | "‚àà" | "‚àâ" | "‚àã" | "‚àå" | "‚äÜ" | "‚äà" | "‚äÇ" | "‚äÑ" | "‚ää" | "‚àù" | "‚àä" | "‚àç" | "‚à•" | "‚à¶" | "‚à∑" | "‚à∫" | "‚àª" | "‚àΩ" | "‚àæ" | "‚âÅ" | "‚âÉ" | "‚âÇ" | "‚âÑ" | "‚âÖ" | "‚âÜ" | "‚âá" | "‚âà" | "‚ââ" | "‚âä" | "‚âã" | "‚âå" | "‚âç" | "‚âé" | "‚âê" | "‚âë" | "‚âí" | "‚âì" | "‚âñ" | "‚âó" | "‚âò" | "‚âô" | "‚âö" | "‚âõ" | "‚âú" | "‚âù" | "‚âû" | "‚âü" | "‚â£" | "‚â¶" | "‚âß" | "‚â®" | "‚â©" | "‚â™" | "‚â´" | "‚â¨" | "‚â≠" | "‚âÆ" | "‚âØ" | "‚â∞" | "‚â±" | "‚â≤" | "‚â≥" | "‚â¥" | "‚âµ" | "‚â∂" | "‚â∑" | "‚â∏" | "‚âπ" | "‚â∫" | "‚âª" | "‚âº" | "‚âΩ" | "‚âæ" | "‚âø" | "‚äÄ" | "‚äÅ" | "‚äÉ" | "‚äÖ" | "‚äá" | "‚äâ" | "‚äã" | "‚äè" | "‚äê" | "‚äë" | "‚äí" | "‚äú" | "‚ä©" | "‚ä¨" | "‚äÆ" | "‚ä∞" | "‚ä±" | "‚ä≤" | "‚ä≥" | "‚ä¥" | "‚äµ" | "‚ä∂" | "‚ä∑" | "‚ãç" | "‚ãê" | "‚ãë" | "‚ãï" | "‚ãñ" | "‚ãó" | "‚ãò" | "‚ãô" | "‚ãö" | "‚ãõ" | "‚ãú" | "‚ãù" | "‚ãû" | "‚ãü" | "‚ã†" | "‚ã°" | "‚ã¢" | "‚ã£" | "‚ã§" | "‚ã•" | "‚ã¶" | "‚ãß" | "‚ã®" | "‚ã©" | "‚ã™" | "‚ã´" | "‚ã¨" | "‚ã≠" | "‚ã≤" | "‚ã≥" | "‚ã¥" | "‚ãµ" | "‚ã∂" | "‚ã∑" | "‚ã∏" | "‚ãπ" | "‚ã∫" | "‚ãª" | "‚ãº" | "‚ãΩ" | "‚ãæ" | "‚ãø" | "‚üà" | "‚üâ" | "‚üí" | "‚¶∑" | "‚ßÄ" | "‚ßÅ" | "‚ß°" | "‚ß£" | "‚ß§" | "‚ß•" | "‚©¶" | "‚©ß" | "‚©™" | "‚©´" | "‚©¨" | "‚©≠" | "‚©Æ" | "‚©Ø" | "‚©∞" | "‚©±" | "‚©≤" | "‚©≥" | "‚©µ" | "‚©∂" | "‚©∑" | "‚©∏" | "‚©π" | "‚©∫" | "‚©ª" | "‚©º" | "‚©Ω" | "‚©æ" | "‚©ø" | "‚™Ä" | "‚™Å" | "‚™Ç" | "‚™É" | "‚™Ñ" | "‚™Ö" | "‚™Ü" | "‚™á" | "‚™à" | "‚™â" | "‚™ä" | "‚™ã" | "‚™å" | "‚™ç" | "‚™é" | "‚™è" | "‚™ê" | "‚™ë" | "‚™í" | "‚™ì" | "‚™î" | "‚™ï" | "‚™ñ" | "‚™ó" | "‚™ò" | "‚™ô" | "‚™ö" | "‚™õ" | "‚™ú" | "‚™ù" | "‚™û" | "‚™ü" | "‚™†" | "‚™°" | "‚™¢" | "‚™£" | "‚™§" | "‚™•" | "‚™¶" | "‚™ß" | "‚™®" | "‚™©" | "‚™™" | "‚™´" | "‚™¨" | "‚™≠" | "‚™Æ" | "‚™Ø" | "‚™∞" | "‚™±" | "‚™≤" | "‚™≥" | "‚™¥" | "‚™µ" | "‚™∂" | "‚™∑" | "‚™∏" | "‚™π" | "‚™∫" | "‚™ª" | "‚™º" | "‚™Ω" | "‚™æ" | "‚™ø" | "‚´Ä" | "‚´Å" | "‚´Ç" | "‚´É" | "‚´Ñ" | "‚´Ö" | "‚´Ü" | "‚´á" | "‚´à" | "‚´â" | "‚´ä" | "‚´ã" | "‚´å" | "‚´ç" | "‚´é" | "‚´è" | "‚´ê" | "‚´ë" | "‚´í" | "‚´ì" | "‚´î" | "‚´ï" | "‚´ñ" | "‚´ó" | "‚´ò" | "‚´ô" | "‚´∑" | "‚´∏" | "‚´π" | "‚´∫" | "‚ä¢" | "‚ä£" | "‚üÇ")
  }
  assignOperator {
    ":=" | "~" | "$=" | "."? ("=" | "+=" | "-=" | "*=" | "/=" | "//=" | "|=|" | "^=" | "√∑=" | "%=" | "<<=" | ">>=" | ">>>=" | "||=|" | "&=" | "‚äª=" | "‚âî" | "‚©¥" | "‚âï")
  }
  unaryOperatorExtra {
    ">:" | "!" | "~" | "¬¨" | "‚àö" | "‚àõ" | "‚àú"
  }
  plusminus {
    "+" | "-"
  }
  Character {
    "'" ("\\" !['] | ![']) "'"
  }

  broadcastOperator[@name="."] { "." }

  @precedence {
    Number
    // comparisonOperator,
    // "=",
    broadcastOperator
    // assignOperator,
    // unaryOperatorExtra,
    // plusOperatorExtra,
    "."
    // ternary1,
    // ternary2,
    // whitespace
  }

    
  "function" ":(" "$(" "(" ")" "," ";"
  "end" "return"
}